from fuzzywuzzy import fuzz
from sklearn.metrics import precision_score, recall_score, f1_score

def compute_metrics(predictions, truths):
    # 预处理，将键值对展开为列表
    pred_keys = [list(d.keys())[0].strip().lower().replace(" ", "") for d in predictions]
    true_keys = [list(d.keys())[0].strip().lower().replace(" ", "") for d in truths]
    
    # 生成二进制标签列表，1代表匹配，0代表不匹配
    pred_labels = []
    for pred_key in pred_keys:
        # 计算与每个真实键的最高相似度
        max_similarity = max(fuzz.token_sort_ratio(pred_key, true_key) for true_key in true_keys)
        # 如果相似度大于阈值（例如80），则认为匹配
        pred_labels.append(1 if max_similarity >= 80 else 0)

    true_labels = []
    for true_key in true_keys:
        # 计算与每个预测键的最高相似度
        max_similarity = max(fuzz.token_sort_ratio(true_key, pred_key) for pred_key in pred_keys)
        # 如果相似度大于阈值（例如80），则认为匹配
        true_labels.append(1 if max_similarity >= 80 else 0)

    # 计算准确率、召回率和F1分数
    precision = precision_score(true_labels, pred_labels)
    recall = recall_score(true_labels, pred_labels)
    f1 = f1_score(true_labels, pred_labels)

    return precision, recall, f1

# 示例数据
ocr_results = [{" Monthly": "blank"}, {" Settlement Date Basis": "error_value"}]
manual_results = [{" Monthly": "blank"}, {" Settlement Date Basis": "correct_value"}]

precision, recall, f1 = compute_metrics(ocr_results, manual_results)
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")
