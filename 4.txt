import cv2
import numpy as np


def visualize_horizontal_projection(image_path, ocr_boxes, blank_threshold):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    for box in ocr_boxes:
        x_min = int(min(box, key=lambda b: b[0])[0])
        y_min = int(min(box, key=lambda b: b[1])[1])
        x_max = int(max(box, key=lambda b: b[0])[0])
        y_max = int(max(box, key=lambda b: b[1])[1])

        cropped = gray[y_min:y_max, x_min:x_max]
        _, binary_cropped = cv2.threshold(cropped, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

        # 垂直投影
        vertical_projection = np.sum(binary_cropped == 255, axis=0)
        projection_normalized = (vertical_projection * (y_max - y_min) / vertical_projection.max()).astype(np.uint32)

        # 标记空白区域
        blank_regions = []
        in_blank = False
        start = 0

        for i, count in enumerate(projection_normalized):
            if count < blank_threshold and not in_blank:
                in_blank = True
                start = i
            elif count >= blank_threshold and in_blank:
                if i - start > 1:  # 至少1像素宽的空白
                    blank_regions.append((x_min + start, x_min + i))
                in_blank = False

        # 在原始图像上绘制结果
        for start, end in blank_regions:
            cv2.rectangle(image, (start, y_min), (end, y_max), (0, 255, 0), 2)

        # 绘制文本框
        points = np.array(box, np.int32).reshape((-1, 1, 2))
        cv2.polylines(image, [points], isClosed=True, color=(255, 0, 0), thickness=2)

    return image

ocr_boxes = [
    [[165.0, 43.8], [433.8, 42.0], [433.8, 58.8], [165.8, 59.0]],
    [[65.8, 66.8], [216.8, 66.8], [216.8, 83.8], [65.0, 83.8]],
    # 更多边界框...
]
# Example usage:
image_path = '2.png'
modified_image = visualize_horizontal_projection(image_path, ocr_boxes, blank_threshold=20)
cv2.imshow("Projection Visualization", modified_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
