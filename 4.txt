def extend_right(input_box, boxes):
    """
    Extend the 'right' of the input box to just before the left side of any box that is directly to its right.
    
    Args:
    input_box (dict): A dictionary with keys 'left', 'right', 'top', 'bottom' representing the input box.
    boxes (list of dicts): A list of dictionaries, each with keys 'left', 'right', 'top', 'bottom' representing each box.
    
    Returns:
    dict: The adjusted input_box if a box is found to the right; otherwise, the original input_box.
    """
    input_left = input_box['left']
    input_right = input_box['right']
    input_top = input_box['top']
    input_bottom = input_box['bottom']
    min_left = None

    # Iterate over each box in the list
    for box in boxes:
        left = box['left']
        right = box['right']
        top = box['top']
        bottom = box['bottom']
        
        # Check if the current box is to the right of the input box and overlaps vertically
        if left > input_right and not (bottom <= input_top or top >= input_bottom):
            # Find the nearest 'left' of a box to the right of the input box
            if min_left is None or left < min_left:
                min_left = left
    
    # If a nearest right box is found, adjust the 'right' of the input box
    if min_left is not None:
        input_box['right'] = min_left - 1
    
    return input_box

# Example usage:
input_box = {'left': 10, 'right': 20, 'top': 10, 'bottom': 20}
boxes = [
    {'left': 25, 'right': 35, 'top': 15, 'bottom': 25},
    {'left': 40, 'right': 50, 'top': 10, 'bottom': 20},
    {'left': 21, 'right': 30, 'top': 5, 'bottom': 15}
]
adjusted_box = extend_right(input_box, boxes)
print("Adjusted Input Box:", adjusted_box)
