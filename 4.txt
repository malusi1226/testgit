
import cv2
import numpy as np
from paddleocr import PaddleOCR
from matplotlib import pyplot as plt
from PIL import Image
import pytesseract

# 配置 Tesseract 的路径，如果需要
pytesseract.pytesseract.tesseract_cmd = r'YOUR_TESSERACT_PATH'  # 例如，r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# 初始化 PaddleOCR，强制使用 CPU
ocr = PaddleOCR(use_angle_cls=True, lang='en', use_gpu=False)

def paddleocr_to_tesseract(image_path, resize_factor=2):
    # 加载图像
    image = cv2.imread(image_path)
    img_height, img_width = image.shape[:2]
    
    # 使用 PaddleOCR 进行识别
    result = ocr.ocr(image_path, cls=True)

    print("PaddleOCR 识别结果:")
    for idx, res in enumerate(result[0]):
        box = res[0]  # 文本框的坐标
        text = res[1][0]  # 识别到的文本
        print(f"Box {idx + 1}: {text}")

        # 绘制红色边框
        cv2.polylines(image, [np.array(box, np.int32)], isClosed=True, color=(0, 0, 255), thickness=2)

        # 获取文本框坐标
        x_min, y_min = int(min([pt[0] for pt in box])), int(min([pt[1] for pt in box]))
        x_max, y_max = int(max([pt[0] for pt in box])), int(max([pt[1] for pt in box]))

        # 裁剪文本框区域
        line_image = image[y_min:y_max, x_min:x_max]

        # 放大文本框区域
        enlarged_line_image = cv2.resize(line_image, None, fx=resize_factor, fy=resize_factor, interpolation=cv2.INTER_CUBIC)

        # 转换为 PIL 图像以供 Tesseract 识别
        line_image_pil = Image.fromarray(cv2.cvtColor(enlarged_line_image, cv2.COLOR_BGR2RGB))

        # 使用 Tesseract 对整行进行单词级别的识别
        custom_config = r'--oem 1 --psm 6'  # 使用 LSTM 引擎，假设一个单独的统一文本块
        d = pytesseract.image_to_data(line_image_pil, config=custom_config, output_type=pytesseract.Output.DICT)

        n_boxes = len(d['level'])
        for i in range(n_boxes):
            (x, y, w, h) = (d['left'][i], d['top'][i], d['width'][i], d['height'][i])
            if d['text'][i].strip():
                print(f"Word recognized by Tesseract: {d['text'][i]}")
                # 缩小回原来的大小
                x, y, w, h = int(x / resize_factor), int(y / resize_factor), int(w / resize_factor), int(h / resize_factor)
                # 绘制蓝色边框
                cv2.rectangle(image, (x_min + x, y_min + y), (x_min + x + w, y_min + y + h), (255, 0, 0), 2)

    # 显示结果图像
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.show()

    # 保存结果图像
    cv2.imwrite('output_image_with_boxes.png', image)

# 使用示例
image_path = 'input_image.png'
paddleocr_to_tesseract(image_path, resize_factor=2)  # 调整 resize_factor 值
